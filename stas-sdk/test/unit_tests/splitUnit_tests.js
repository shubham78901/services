const bsv = require('bsv')
const { sighash } = require('../../lib/stas')
const {
    split,
    splitWithCallback,
    unsignedSplit
} = require('../../index')
const privateKeyStr = 'Ky5XHRQvYEcEbtGoQQQETbctAgAQKvb3PocfJSnkyHuEj5Nzj1pb'
const privateKey = new bsv.PrivateKey(privateKeyStr)
const expectedHex = '010000000235f1434cd87b2fbcf180ad2bc844af5f681db07e9976511831184ab6fbb8cf4600000000fd1a0702b80b1469517ff3b4d1cf991a263489a49078b118492f3002b80b1469517ff3b4d1cf991a263489a49078b118492f30025e1a14fe5697f24aa6e72a1d5f034121156a81d4f46f95002035f1434cd87b2fbcf180ad2bc844af5f681db07e9976511831184ab6fbb8cf46004d4206010000009811d4d7b5b82e679da84829f5b55cfad9bb82fb533c1820426efffbe71a42ee752adad0a7b9ceca853768aebb6965eca126a62965f698a0c1bc43d83db632ad35f1434cd87b2fbcf180ad2bc844af5f681db07e9976511831184ab6fbb8cf4600000000fda30576a914f61b33071baa419ad2509d34c9a2b51081e80baa88ac6976aa607f5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7c5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01007e818b21414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff007d976e7c5296a06394677768827601249301307c7e23022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798027e7c7e7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01417e21038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218ad547f7701207f01207f7701247f517f7801007e8102fd00a063546752687f7801007e817f727e7b01177f777b557a766471567a577a786354807e7e676d68aa880067765158a569765187645294567a5379587a7e7e78637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6867567a6876aa587a7d54807e577a597a5a7a786354807e6f7e7eaa727c7e676d6e7eaa7c687b7eaa587a7d877663516752687c72879b69537a647500687c7b547f77517f7853a0916901247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77788c6301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f777852946301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77686877517f7c52797d8b9f7c53a09b91697c76638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6876638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6863587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f7768587f517f7801007e817602fc00a06302fd00a063546752687f7801007e81727e7b7b687f75537f7c0376a9148801147f775379645579887567726881766968789263556753687a76026c057f7701147f8263517f7c766301007e817f7c6775006877686b537992635379528763547a6b547a6b677c6b567a6b537a7c717c71716868547a587f7c81547a557964936755795187637c686b687c547f7701207f75748c7a7669765880748c7a76567a876457790376a9147e7c7e557967041976a9147c7e0288ac687e7e5579636c766976748c7a9d58807e6c0376a9147e748c7a7e6c7e7e676c766b8263828c007c80517e846864745aa0637c748c7a76697d937b7b58807e56790376a9147e748c7a7e55797e7e6868686c567a5187637500678263828c007c80517e846868647459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e687459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e68687c537a9d547963557958807e041976a91455797e0288ac7e7e68aa87726d77776a14b599e85e574e047f6525a6ff13f6074269541d190100055441414c54036f6e65581b000000000000ffffffff8074682d444082a3a4d0b781ad9cad84bd792690805771579fbbdaf7f4b8052d0000000041000000473044022021bfca721504699bc2e198070dc2f3ff120bc90407bdd61e447f1db5ffc605a102203f7debc2a7ce0fad9b20494b069a5f7eea16d9b419e318670eeed88acebcd32e41210270d2ae2d5eb30c142347b26b2b4684145b6934d7964127637eaf9ace366945b1ffffffff35f1434cd87b2fbcf180ad2bc844af5f681db07e9976511831184ab6fbb8cf46000000006a473044022021bfca721504699bc2e198070dc2f3ff120bc90407bdd61e447f1db5ffc605a102203f7debc2a7ce0fad9b20494b069a5f7eea16d9b419e318670eeed88acebcd32e41210270d2ae2d5eb30c142347b26b2b4684145b6934d7964127637eaf9ace366945b1ffffffff03b80b000000000000fda30576a91469517ff3b4d1cf991a263489a49078b118492f3088ac6976aa607f5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7c5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01007e818b21414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff007d976e7c5296a06394677768827601249301307c7e23022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798027e7c7e7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01417e21038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218ad547f7701207f01207f7701247f517f7801007e8102fd00a063546752687f7801007e817f727e7b01177f777b557a766471567a577a786354807e7e676d68aa880067765158a569765187645294567a5379587a7e7e78637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6867567a6876aa587a7d54807e577a597a5a7a786354807e6f7e7eaa727c7e676d6e7eaa7c687b7eaa587a7d877663516752687c72879b69537a647500687c7b547f77517f7853a0916901247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77788c6301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f777852946301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77686877517f7c52797d8b9f7c53a09b91697c76638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6876638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6863587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f7768587f517f7801007e817602fc00a06302fd00a063546752687f7801007e81727e7b7b687f75537f7c0376a9148801147f775379645579887567726881766968789263556753687a76026c057f7701147f8263517f7c766301007e817f7c6775006877686b537992635379528763547a6b547a6b677c6b567a6b537a7c717c71716868547a587f7c81547a557964936755795187637c686b687c547f7701207f75748c7a7669765880748c7a76567a876457790376a9147e7c7e557967041976a9147c7e0288ac687e7e5579636c766976748c7a9d58807e6c0376a9147e748c7a7e6c7e7e676c766b8263828c007c80517e846864745aa0637c748c7a76697d937b7b58807e56790376a9147e748c7a7e55797e7e6868686c567a5187637500678263828c007c80517e846868647459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e687459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e68687c537a9d547963557958807e041976a91455797e0288ac7e7e68aa87726d77776a14b599e85e574e047f6525a6ff13f6074269541d190100055441414c54036f6e65b80b000000000000fda30576a91469517ff3b4d1cf991a263489a49078b118492f3088ac6976aa607f5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7c5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01007e818b21414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff007d976e7c5296a06394677768827601249301307c7e23022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798027e7c7e7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01417e21038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218ad547f7701207f01207f7701247f517f7801007e8102fd00a063546752687f7801007e817f727e7b01177f777b557a766471567a577a786354807e7e676d68aa880067765158a569765187645294567a5379587a7e7e78637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6867567a6876aa587a7d54807e577a597a5a7a786354807e6f7e7eaa727c7e676d6e7eaa7c687b7eaa587a7d877663516752687c72879b69537a647500687c7b547f77517f7853a0916901247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77788c6301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f777852946301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77686877517f7c52797d8b9f7c53a09b91697c76638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6876638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6863587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f7768587f517f7801007e817602fc00a06302fd00a063546752687f7801007e81727e7b7b687f75537f7c0376a9148801147f775379645579887567726881766968789263556753687a76026c057f7701147f8263517f7c766301007e817f7c6775006877686b537992635379528763547a6b547a6b677c6b567a6b537a7c717c71716868547a587f7c81547a557964936755795187637c686b687c547f7701207f75748c7a7669765880748c7a76567a876457790376a9147e7c7e557967041976a9147c7e0288ac687e7e5579636c766976748c7a9d58807e6c0376a9147e748c7a7e6c7e7e676c766b8263828c007c80517e846864745aa0637c748c7a76697d937b7b58807e56790376a9147e748c7a7e55797e7e6868686c567a5187637500678263828c007c80517e846868647459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e687459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e68687c537a9d547963557958807e041976a91455797e0288ac7e7e68aa87726d77776a14b599e85e574e047f6525a6ff13f6074269541d190100055441414c54036f6e655e1a0000000000001976a914fe5697f24aa6e72a1d5f034121156a81d4f46f9588ac00000000'
let utxo =   {
    txid: '46cfb8fbb64a1831185176997eb01d685faf44c82bad80f1bc2f7bd84c43f135',
    vout: 0,
    scriptPubKey: '76a914f61b33071baa419ad2509d34c9a2b51081e80baa88ac6976aa607f5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7c5f7f7c5e7f7c5d7f7c5c7f7c5b7f7c5a7f7c597f7c587f7c577f7c567f7c557f7c547f7c537f7c527f7c517f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01007e818b21414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff007d976e7c5296a06394677768827601249301307c7e23022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798027e7c7e7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c8276638c687f7c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e01417e21038ff83d8cf12121491609c4939dc11c4aa35503508fe432dc5a5c1905608b9218ad547f7701207f01207f7701247f517f7801007e8102fd00a063546752687f7801007e817f727e7b01177f777b557a766471567a577a786354807e7e676d68aa880067765158a569765187645294567a5379587a7e7e78637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6878637c8c7c53797e577a7e6867567a6876aa587a7d54807e577a597a5a7a786354807e6f7e7eaa727c7e676d6e7eaa7c687b7eaa587a7d877663516752687c72879b69537a647500687c7b547f77517f7853a0916901247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77788c6301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f777852946301247f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e816854937f77686877517f7c52797d8b9f7c53a09b91697c76638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6876638c7c587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f777c6863587f77517f7c01007e817602fc00a06302fd00a063546752687f7c01007e81687f7768587f517f7801007e817602fc00a06302fd00a063546752687f7801007e81727e7b7b687f75537f7c0376a9148801147f775379645579887567726881766968789263556753687a76026c057f7701147f8263517f7c766301007e817f7c6775006877686b537992635379528763547a6b547a6b677c6b567a6b537a7c717c71716868547a587f7c81547a557964936755795187637c686b687c547f7701207f75748c7a7669765880748c7a76567a876457790376a9147e7c7e557967041976a9147c7e0288ac687e7e5579636c766976748c7a9d58807e6c0376a9147e748c7a7e6c7e7e676c766b8263828c007c80517e846864745aa0637c748c7a76697d937b7b58807e56790376a9147e748c7a7e55797e7e6868686c567a5187637500678263828c007c80517e846868647459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e687459a0637c748c7a76697d937b7b58807e55790376a9147e748c7a7e55797e7e68687c537a9d547963557958807e041976a91455797e0288ac7e7e68aa87726d77776a14b599e85e574e047f6525a6ff13f6074269541d190100055441414c54036f6e65',
    satoshis: 7000
  }
  let addr = 'mq7psuJ7Z9h1w4H3YtcCoHx7cPmhVM9UsV'
  let splitDestinations = []
  splitDestinations[0] = { address: addr, satoshis: 3000 }
  splitDestinations[1] = { address: addr, satoshis: 3000 }
  const signatureCallback = async (tx, i, script, satoshis) => {
    return bsv.Transaction.sighash.sign(tx, privateKey, sighash, i, script, satoshis).toTxFormat().toString('hex')
}
  
describe('Split Unit Tests', () => {

    it('should create Split', async () => {
         const hex = await split(
            privateKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey,
        )
        expect(hex).toBe(expectedHex)
    })

    it('should fail with null token owner private key', async () => {
        await expect(() => split(
            null,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey
          )).rejects.toThrow('Token owner private key is null')
    })
})

describe('unsignedSplit unit tests', () => {

    it('unsignedSplit returns tx hex', async () => {
         const res = await split(
            privateKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey,
        )
        expect(res).toBe(expectedHex)
    })
})

describe('SplitWithCallBack Unit Tests', () => {

    afterEach(async () => {
        splitDestinations = [
            { address: addr, satoshis: 3000 },
            { address: addr, satoshis: 3000 }
        ]
    })
  
    it('should create hex splitWithCallback', async () => {
        const expectedHex = ''
        const res = await splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
        )
        expect(res).toBe(expectedHex)
    })

    it('should fail with too many splits', async () => {
        splitDestinations[2] = { address: addr, satoshis: 3000 }
        splitDestinations[3] = { address: addr, satoshis: 3000 }
        splitDestinations[4] = { address: addr, satoshis: 3000 }

        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Must have less than 5 segments')
    });

    it('should fail with too many splits', async () => {
        splitDestinations = []
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('split destinations array is null or empty')
    });

    it('should fail with zero sats', async () => {
        splitDestinations = [  splitDestinations[2] = { address: addr, satoshis: 0 }]
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Invalid amount in split destination')
    });

    it('should fail with negative sats', async () => {
        splitDestinations = [  splitDestinations[2] = { address: addr, satoshis: -1 }]
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Invalid amount in split destination')
    });

    it('should fail with address too Long', async () => {
        splitDestinations = [  splitDestinations[2] = { address: '1LF2wNCBT9dp5jN7fa6xSAaUGjJ5Pyz5VGaUG', satoshis: -1 }]
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Invalid address in split destination')
    });


    it('should fail with address too short', async () => {
        splitDestinations = [  splitDestinations[2] = { address: '1LF2wNCBT9dp5jN7f', satoshis: -1 }]
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Invalid address in split destination')
    });


    it('should fail with null token owner public key', async () => {
        await expect(() => splitWithCallback(
            null,
            utxo,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Token owner public key is null')
    })

    it('should fail with null stas utxo', async () => {
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            null,
            splitDestinations,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('stasUTxo is null')
    });


    it('should fail with null split destinations', async () => {
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            null,
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('split destinations array is null or empty')
    });

    it('should fail with empty split destinations', async () => {
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            [],
            utxo,
            privateKey.publicKey,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('split destinations array is null or empty')
    });

    it('should fail with null funding public key', async () => {
        await expect(() => splitWithCallback(
            privateKey.publicKey,
            utxo,
            splitDestinations,
            utxo,
            null,
            signatureCallback,
            signatureCallback
          )).rejects.toThrow('Payment UTXO provided but payment key is null')
    });
})